<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Seek.API</name>
    </assembly>
    <members>
        <member name="M:Seek.API.Controllers.System.SecureSettingsController.UpdateEmailSettings(Seek.Core.Security.EmailSettings)">
            <summary>
            Updates secure email settings
            </summary>
        </member>
        <member name="M:Seek.API.Controllers.System.SecureSettingsController.GetEmailSettings">
            <summary>
            Gets secure email settings (without password)
            </summary>
        </member>
        <member name="M:Seek.API.Controllers.System.VerificationController.GetVerificationStatus">
            <summary>
            Checks if the application is verified
            </summary>
        </member>
        <member name="M:Seek.API.Controllers.System.VerificationController.SendVerificationCode">
            <summary>
            Sends a verification code to the admin email
            </summary>
        </member>
        <member name="M:Seek.API.Controllers.System.VerificationController.VerifyApplication(Seek.API.Controllers.System.VerificationRequest)">
            <summary>
            Verifies the application using the provided code
            </summary>
        </member>
        <member name="M:Seek.API.Controllers.System.VerificationController.ResetVerification">
            <summary>
            Resets the verification status (requires authentication in production)
            </summary>
        </member>
        <member name="T:Seek.API.Security.New.ApplicationDbContextExtensions">
            <summary>
            Extension methods for the ApplicationDbContext to add security features
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.ApplicationDbContextExtensions.ConfigureEncryption(Microsoft.EntityFrameworkCore.DbContextOptionsBuilder,System.String,System.IServiceProvider)">
            <summary>
            Creates a configured DbContextOptionsBuilder with proper encryption settings
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.ApplicationDbContextExtensions.IsDatabaseAccessible(System.IServiceProvider,Microsoft.Extensions.Logging.ILogger)">
            <summary>
            Checks if the application is verified and the database is accessible
            </summary>
        </member>
        <member name="T:Seek.API.Security.New.DatabaseEncryptionExtensions">
            <summary>
            Extensions for integrating database encryption with the application startup
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.DatabaseEncryptionExtensions.AddDatabaseEncryptionServices(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Registers database encryption services
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.DatabaseEncryptionExtensions.UseVerificationCheck(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configures application startup to check for verification before allowing database access
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.DatabaseEncryptionExtensions.VerifyDatabaseEncryptionAsync(Seek.EF.ApplicationDbContext,Seek.Core.IRepositories.Database.IRepo_Database_Security,System.String)">
            <summary>
            Helper method to verify encrypted database connection
            </summary>
        </member>
        <member name="T:Seek.API.Security.New.EmailServiceExtensions">
            <summary>
            Extension methods for the EmailService class
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.EmailServiceExtensions.SendVerificationCodeAsync(Seek.Core.Security.EmailService,System.String,System.String)">
            <summary>
            Sends a verification code email to the specified recipient
            </summary>
            <param name="emailService">The email service instance</param>
            <param name="recipient">Email recipient</param>
            <param name="verificationCode">The verification code to send</param>
            <returns>A task representing the asynchronous operation</returns>
        </member>
        <member name="M:Seek.API.Security.New.EmailServiceExtensions.BuildVerificationCodeEmail(System.String)">
            <summary>
            Builds the email body for a verification code notification
            </summary>
        </member>
        <member name="T:Seek.API.Security.New.SecureSettingsManager">
            <summary>
            Manages secure storage and retrieval of sensitive application settings
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.SecureSettingsManager.GetSecureEmailSettings">
            <summary>
            Gets secure email settings, either from encrypted storage or falls back to configuration
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.SecureSettingsManager.SaveSecureEmailSettings(Seek.Core.Security.EmailSettings)">
            <summary>
            Saves email settings to secure encrypted storage
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.SecureSettingsManager.LoadSecureSettings">
            <summary>
            Loads secure settings from encrypted storage
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.SecureSettingsManager.SaveSecureSettings(Seek.API.Security.New.SecureApplicationSettings)">
            <summary>
            Saves secure settings to encrypted storage
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.SecureSettingsManager.EncryptData(System.String,System.String)">
            <summary>
            Encrypts data using AES with the provided key
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.SecureSettingsManager.DecryptData(System.Byte[],System.String)">
            <summary>
            Decrypts data using AES with the provided key
            </summary>
        </member>
        <member name="T:Seek.API.Security.New.SecureApplicationSettings">
            <summary>
            Class to hold all secure application settings
            </summary>
        </member>
        <member name="T:Seek.API.Security.New.SqliteEncryptionInterceptorExtensions">
            <summary>
            Extension methods for the SqliteEncryptionInterceptor
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.SqliteEncryptionInterceptorExtensions.CreateWithVerification(System.IServiceProvider,System.String)">
            <summary>
            Creates an enhanced SqliteEncryptionInterceptor that checks for verification
            </summary>
        </member>
        <member name="T:Seek.API.Security.New.VerificationSqliteEncryptionInterceptor">
            <summary>
            SqliteEncryptionInterceptor that checks for application verification
            </summary>
        </member>
        <member name="T:Seek.API.Security.New.StartupExtensions">
            <summary>
            Extensions for configuring security services in application startup
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.StartupExtensions.AddSeekSecurityServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Adds all security-related services to the service collection
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.StartupExtensions.UseSeekSecurity(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Configures security middleware for the application
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.StartupExtensions.InitializeSecureSettings(Microsoft.AspNetCore.Builder.IApplicationBuilder)">
            <summary>
            Initializes secure settings by transferring from appsettings to encrypted storage
            </summary>
        </member>
        <member name="T:Seek.API.Security.New.VerificationService">
            <summary>
            Service that manages application verification through email codes
            </summary>
        </member>
        <member name="M:Seek.API.Security.New.VerificationService.GenerateVerificationCodeAsync">
            <summary>
            Generates a new verification code and stores its hash
            </summary>
            <returns>The generated verification code</returns>
        </member>
        <member name="M:Seek.API.Security.New.VerificationService.VerifyCodeAsync(System.String)">
            <summary>
            Verifies if the provided code matches the stored hash
            </summary>
            <param name="code">The verification code to verify</param>
            <returns>True if verification was successful, false otherwise</returns>
        </member>
        <member name="M:Seek.API.Security.New.VerificationService.IsVerificationCompleted">
            <summary>
            Checks if the application has been verified
            </summary>
            <returns>True if the application is verified, false otherwise</returns>
        </member>
        <member name="M:Seek.API.Security.New.VerificationService.GetVerificationStatusAsync">
            <summary>
            Gets the verification status details
            </summary>
            <returns>A tuple containing verification status and when it was verified (if applicable)</returns>
        </member>
        <member name="M:Seek.API.Security.New.VerificationService.ResetVerificationAsync">
            <summary>
            Resets the verification status, requiring a new verification
            </summary>
            <returns>True if successfully reset, false otherwise</returns>
        </member>
        <member name="T:Seek.API.Services.Integration.SecurityServiceRegistration">
            <summary>
            Helper class for registering all security services
            </summary>
        </member>
        <member name="M:Seek.API.Services.Integration.SecurityServiceRegistration.RegisterSecurityServices(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
            Register all services required for the security implementation
            </summary>
        </member>
        <member name="M:Seek.API.Services.Integration.SecurityServiceRegistration.RegisterSecurityServicesForTesting(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
            Register services for simpler integration tests
            </summary>
        </member>
        <member name="T:Seek.API.Services.Integration.StartupSecurityExample">
            <summary>
            Example implementation of the security features in the StartUp class
            </summary>
        </member>
        <member name="T:Seek.API.SqliteEncryptionInterceptor">
            <summary>
            Interceptor that applies encryption settings to SQLite connections
            </summary>
        </member>
        <member name="M:Seek.API.SqliteEncryptionInterceptor.#ctor(System.String,Microsoft.Extensions.Logging.ILogger{Seek.API.SqliteEncryptionInterceptor},System.Boolean)">
            <summary>
            Creates a new instance of SqliteEncryptionInterceptor
            </summary>
            <param name="encryptionKey">The encryption key for the database</param>
            <param name="logger">Logger instance</param>
            <param name="allowKeyRefresh">Whether to allow refreshing the key from secure storage on connection open (default: false)</param>
        </member>
        <member name="T:Seek.API.SqliteEncryptionInterceptorFactory">
            <summary>
            Factory for creating SQLite encryption interceptors with appropriate key management
            </summary>
        </member>
        <member name="M:Seek.API.SqliteEncryptionInterceptorFactory.Create(Seek.Core.Security.SecureKeyManager,System.String,Microsoft.Extensions.Logging.ILogger{Seek.API.SqliteEncryptionInterceptor},System.String)">
            <summary>
            Creates an interceptor with a secure key from the key manager or falls back to a provided key
            </summary>
        </member>
    </members>
</doc>
